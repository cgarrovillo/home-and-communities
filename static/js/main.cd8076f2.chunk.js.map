{"version":3,"sources":["images/centrestreet.jpg","components/Landing.tsx","components/Home.tsx","components/Community.tsx","services/CommunitiesService.ts","services/HomesService.ts","components/Communities.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Landing","className","id","to","src","img","Home","props","home","type","area","price","toLocaleString","style","currency","Community","useState","setError","c","community","avgPrice","group","homes","imgUrl","alt","name","map","CommunitiesService","communities","setCommunities","setHomes","useEffect","fetch","then","response","json","data","catch","err","console","log","HomesService","sort","a","b","localeCompare","filter","communityId","length","priceText","avg","reduce","avgDisplay","Math","floor","round","getAvgPrice","Communities","App","basename","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.cd8076f2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/centrestreet.cd0ac224.jpg\";","import React from 'react';\r\nimport { Link } from 'react-router-dom'\r\nimport img from '../images/centrestreet.jpg'\r\n\r\nfunction Landing() {\r\n    return (\r\n        <section className=\"content-container\">\r\n            <div className=\"landing-container\">\r\n                <div id=\"landing__title\">\r\n                    <h1 >Home & Communities</h1>\r\n                    <div id=\"landing__ctas\">\r\n                        <Link to=\"/communities\" className=\"button button-lg\">Browse Communities</Link>\r\n                    </div>\r\n                </div>\r\n                <div id=\"landing__image\">\r\n                    <img src={img}></img>\r\n                </div>\r\n            </div>\r\n        </section>\r\n    );\r\n}\r\n\r\nexport default Landing;","import React from 'react'\r\nimport { HomeInterface } from '../interfaces/HomeInterface';\r\n\r\nexport default function Home(props: any) {\r\n    const home: HomeInterface = props.home\r\n    return (\r\n        <li className=\"home\">\r\n            <div className=\"\">{home.type}</div>\r\n            <div className=\"\">{home.area} sqft.</div>\r\n            <div className=\"\">{home.price.toLocaleString('en-us', { style: \"currency\", currency: \"USD\" })}</div>\r\n        </li>\r\n    )\r\n}","import React, { useState } from 'react'\r\nimport { CommunityInterface } from '../interfaces/CommunityInterface'\r\nimport Home from './Home';\r\n\r\nexport default function Community(props: any) {\r\n    const [error, setError] = useState('');\r\n\r\n    const c: CommunityInterface = props.community;\r\n    if (c.avgPrice == null) {\r\n        setError('Price Not Available')\r\n    }\r\n    if (c.group == null) {\r\n        setError('Group Not Available')\r\n    }\r\n    if (c.homes == null) {\r\n        setError('Price Not Available')\r\n    }\r\n    if (c.id == null) {\r\n        setError('Price Not Available')\r\n    }\r\n    if (c.imgUrl == null) {\r\n        setError('Price Not Available')\r\n    }\r\n    if (c.homes == null) {\r\n        setError('Price Not Available')\r\n    }\r\n\r\n    return (\r\n        <div className=\"community card\">\r\n            <img className=\"card-img-top\" src={c.imgUrl} alt=\"Image Not Available\"></img>\r\n            <h3>{c.name}</h3>\r\n            <h4>{c.avgPrice}</h4>\r\n            <ul className=\"list-group community__homes\">\r\n                {c.homes.map(home => (\r\n                    <Home home={home} />\r\n                ))}\r\n            </ul>\r\n\r\n        </div>\r\n    )\r\n}\r\n","import { useEffect, useState } from 'react'\r\nimport { CommunityInterface } from '../interfaces/CommunityInterface';\r\nimport HomesService from './HomesService';\r\n\r\nexport default function CommunitiesService() {\r\n    const [communities, setCommunities] = useState<CommunityInterface[]>([]);\r\n    const homes = HomesService();\r\n\r\n    useEffect(() => {\r\n        fetch(\"https://a18fda49-215e-47d1-9dc6-c6136a04a33a.mock.pstmn.io/communities\")\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                setCommunities(data);\r\n            })\r\n            .catch(err => console.log(err));\r\n    }, [])\r\n    communities.sort((a, b) => a.name.localeCompare(b.name));\r\n    communities.map(community => {\r\n        community.homes = homes.filter(home => community.id === home.communityId);\r\n        if (community.homes.length === 0)\r\n            community.avgPrice = \"Price Range Not Available\"\r\n        else\r\n            community.avgPrice = getAvgPrice(community);\r\n    })\r\n    return communities;\r\n}\r\n\r\n/**\r\n * Gets the average price of all homes in a community\r\n * @param community The community Object containing an array of Homes\r\n * @returns {priceText} The price of the homes in the community\r\n */\r\nfunction getAvgPrice(community: CommunityInterface) {\r\n\r\n    let priceText = \"\";\r\n    const sum = community.homes.reduce((avg, home) => avg + home.price, 0);\r\n    const avg = sum / community.homes.length;\r\n\r\n    const avgDisplay = Math.floor(avg / 100000) * 100;\r\n    const roundedAvg = Math.round(avg / 100000) * 100000;\r\n    if (roundedAvg > avg) {\r\n        priceText = \"High $\" + avgDisplay + \"'s\";\r\n    }\r\n    else {\r\n        priceText = \"Low $\" + avgDisplay + \"'s\";\r\n    }\r\n\r\n    return priceText;\r\n}\r\n","import { useEffect, useState } from 'react'\r\nimport { HomeInterface } from '../interfaces/HomeInterface';\r\n\r\nexport default function HomesService() {\r\n    const [homes, setHomes] = useState<HomeInterface[]>([]);\r\n    useEffect(() => {\r\n        fetch(\"https://a18fda49-215e-47d1-9dc6-c6136a04a33a.mock.pstmn.io/homes\")\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                setHomes(data);\r\n            })\r\n            .catch(err => console.log(err));\r\n    }, [])\r\n\r\n    return homes;\r\n}","import React from 'react'\r\nimport { NavLink, Route, Switch } from 'react-router-dom'\r\nimport Community from './Community'\r\nimport CommunitiesService from '../services/CommunitiesService'\r\nimport CommunitySummary from './Home';\r\n\r\nexport default function Communities() {\r\n    const communities = CommunitiesService();\r\n\r\n    return (\r\n        <section>\r\n            <div className=\"section-navbar\">\r\n                <NavLink to=\"/\">H&C</NavLink>\r\n            </div>\r\n            <div className=\"content-container communities\">\r\n                <h2 className=\"d-flex justify-content-center\">Communities</h2>\r\n\r\n                <div className=\"community-content\">\r\n                    <div className=\"communities-list\">\r\n                        {communities.map(c => (\r\n                            <Community community={c} />\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        </section>\r\n    )\r\n}","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\nimport Landing from './components/Landing'\nimport Communities from './components/Communities'\n\nfunction App() {\n  return (\n    <Router basename=\"/home-and-communities\">\n      <Switch>\n        <Route exact path=\"/\">\n          <Landing />\n        </Route>\n        <Route path=\"/communities\">\n          <Communities />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}